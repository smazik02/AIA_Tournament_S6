// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                  @id
  name                 String
  email                String
  emailVerified        Boolean
  image                String?
  createdAt            DateTime
  updatedAt            DateTime
  sessions             Session[]
  accounts             Account[]
  organizedTournaments Tournament[]
  joinedTournaments    TournamentParticipant[]
  matchesAsPlayer1     Match[]                 @relation(name: "player1")
  matchesAsPlayer2     Match[]                 @relation(name: "player2")

  @@unique([email])
  @@map("users")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("sessions")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("accounts")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verifications")
}

model Tournament {
  id                  String                  @id @default(uuid(4))
  name                String
  discipline          String
  time                DateTime
  location            String
  maxParticipants     Int
  applicationDeadline DateTime
  creationDate        DateTime                @default(now())
  organizerId         String
  organizer           User                    @relation(fields: [organizerId], references: [id])
  sponsors            Sponsor[]
  participants        TournamentParticipant[]
  Match               Match[]

  @@map("tournaments")
}

model TournamentParticipant {
  id               String     @id @default(uuid(4))
  licenseNumber    Int
  ranking          Int
  registrationDate DateTime   @default(now())
  userId           String
  user             User       @relation(fields: [userId], references: [id])
  tournamentId     String
  tournament       Tournament @relation(fields: [tournamentId], references: [id])

  @@unique([licenseNumber, ranking])
  @@map("tournament_participants")
}

model Sponsor {
  id           String     @id @default(uuid(4))
  name         String
  logoUrl      String
  tournamentId String
  tournaments  Tournament @relation(fields: [tournamentId], references: [id])

  @@map("sponsors")
}

model Match {
  id                 String     @id @default(uuid(4))
  number             Int        @default(autoincrement())
  date               DateTime
  tournamentId       String
  tournament         Tournament @relation(fields: [tournamentId], references: [id])
  player1Id          String?
  player1            User?      @relation(fields: [player1Id], references: [id], name: "player1")
  player1Description String     @default("")
  player2Id          String?
  player2            User?      @relation(fields: [player2Id], references: [id], name: "player2")
  player2Description String     @default("")

  @@map("matches")
}
